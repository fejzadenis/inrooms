rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      // Allow reading user documents for networking - authenticated users can read basic profile info
      allow read: if request.auth != null;
      
      // Allow users to create only their own documents
      allow create: if request.auth != null && request.auth.uid == userId;
      
      // Allow users to update their own documents or admin can update any
      // Special handling for connections array - allow updates when adding/removing connections
      allow update: if request.auth != null && (
        request.auth.uid == userId ||
        request.auth.uid == 'uJLXftk0DCYd2ujOjxX30zETSm33' ||
        request.auth.token.email == 'admin@inrooms.com' ||
        // Allow connection updates when the authenticated user is being added/removed from connections
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['connections']) &&
         request.auth.uid in request.resource.data.connections)
      );
      
      // Allow admin to delete users
      allow delete: if request.auth != null && (
        request.auth.uid == 'uJLXftk0DCYd2ujOjxX30zETSm33' ||
        request.auth.token.email == 'admin@inrooms.com'
      );
    }
    
    // Network profiles - simplified view for networking
    match /network_profiles/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Connection requests - for managing pending connections
    match /connection_requests/{requestId} {
      allow read: if request.auth != null && (
        resource.data.fromUserId == request.auth.uid ||
        resource.data.toUserId == request.auth.uid ||
        request.auth.uid == 'uJLXftk0DCYd2ujOjxX30zETSm33' ||
        request.auth.token.email == 'admin@inrooms.com'
      );
      allow create: if request.auth != null && (
        request.resource.data.fromUserId == request.auth.uid
      );
      allow update, delete: if request.auth != null && (
        resource.data.fromUserId == request.auth.uid ||
        resource.data.toUserId == request.auth.uid ||
        request.auth.uid == 'uJLXftk0DCYd2ujOjxX30zETSm33' ||
        request.auth.token.email == 'admin@inrooms.com'
      );
    }
    
    match /messages/{messageId} {
      function getChatParticipants(chatId) {
        return get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      }

      function isValidChatId(senderId, receiverId, chatId) {
        return chatId == [senderId, receiverId].sort().join('_');
      }

      // Allow read if user is a participant in the associated chat or admin
      allow read: if request.auth != null && (
        (resource.data.chatId != null &&
         request.auth.uid in getChatParticipants(resource.data.chatId)) ||
        request.auth.uid == 'uJLXftk0DCYd2ujOjxX30zETSm33' ||
        request.auth.token.email == 'admin@inrooms.com'
      );

      // Allow create if chat exists and the chatId is correctly formed from sender and receiver
      allow create: if request.auth != null && 
        request.resource.data.chatId != null &&
        request.resource.data.senderId != null &&
        request.resource.data.receiverId != null &&
        request.auth.uid == request.resource.data.senderId &&
        isValidChatId(
          request.resource.data.senderId,
          request.resource.data.receiverId,
          request.resource.data.chatId
        );

      // Allow update only for marking messages as read by the receiver or admin
      allow update: if request.auth != null && (
        (resource.data.chatId != null &&
         request.auth.uid in getChatParticipants(resource.data.chatId) &&
         (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']) ||
          (request.auth.uid == resource.data.senderId &&
           request.time < resource.data.timestamp + duration.value(5, 'm')))) ||
        request.auth.uid == 'uJLXftk0DCYd2ujOjxX30zETSm33' ||
        request.auth.token.email == 'admin@inrooms.com'
      );
    }
    
    match /chats/{chatId} {
      function areUsersConnected(userId1, userId2) {
        // Check if both user documents exist
        let user1Exists = exists(/databases/$(database)/documents/users/$(userId1));
        let user2Exists = exists(/databases/$(database)/documents/users/$(userId2));
        
        if (!user1Exists || !user2Exists) {
          return false;
        }
        
        let user1Data = get(/databases/$(database)/documents/users/$(userId1)).data;
        let user2Data = get(/databases/$(database)/documents/users/$(userId2)).data;
        
        // Check if connections field exists and is a list
        let user1HasConnections = 'connections' in user1Data && user1Data.connections is list;
        let user2HasConnections = 'connections' in user2Data && user2Data.connections is list;
        
        if (!user1HasConnections || !user2HasConnections) {
          return false;
        }
        
        return userId1 in user2Data.connections && userId2 in user1Data.connections;
      }

      allow read: if request.auth != null && (
        request.auth.uid in resource.data.participants ||
        request.auth.uid == 'uJLXftk0DCYd2ujOjxX30zETSm33' ||
        request.auth.token.email == 'admin@inrooms.com'
      );
      
      allow create: if request.auth != null && (
        request.auth.uid in request.resource.data.participants &&
        (request.auth.uid == 'uJLXftk0DCYd2ujOjxX30zETSm33' ||
         request.auth.token.email == 'admin@inrooms.com' ||
         (request.resource.data.participants.size() == 2 &&
          areUsersConnected(request.resource.data.participants[0], request.resource.data.participants[1])))
      );
      
      allow update: if request.auth != null && (
        request.auth.uid in resource.data.participants ||
        request.auth.uid == 'uJLXftk0DCYd2ujOjxX30zETSm33' ||
        request.auth.token.email == 'admin@inrooms.com'
      );
    }

    match /achievements/{achievementId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (
        request.auth.uid == 'uJLXftk0DCYd2ujOjxX30zETSm33' ||
        request.auth.token.email == 'admin@inrooms.com'
      );
    }

    match /badges/{badgeId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (
        request.auth.uid == 'uJLXftk0DCYd2ujOjxX30zETSm33' ||
        request.auth.token.email == 'admin@inrooms.com'
      );
    }
    
    // Events collection - admin can manage, users can read
    match /events/{eventId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (
        request.auth.uid == 'uJLXftk0DCYd2ujOjxX30zETSm33' ||
        request.auth.token.email == 'admin@inrooms.com'
      );
    }
    
    // Registrations collection - users can manage their own, admin can view all
    match /registrations/{registrationId} {
      allow read: if request.auth != null && (
        resource.data.userId == request.auth.uid ||
        request.auth.uid == 'uJLXftk0DCYd2ujOjxX30zETSm33' ||
        request.auth.token.email == 'admin@inrooms.com'
      );
      allow create, update: if request.auth != null && (
        request.resource.data.userId == request.auth.uid ||
        request.auth.uid == 'uJLXftk0DCYd2ujOjxX30zETSm33' ||
        request.auth.token.email == 'admin@inrooms.com'
      );
      allow delete: if request.auth != null && (
        resource.data.userId == request.auth.uid ||
        request.auth.uid == 'uJLXftk0DCYd2ujOjxX30zETSm33' ||
        request.auth.token.email == 'admin@inrooms.com'
      );
    }

    // Reminders collection - users can manage their own
    match /reminders/{reminderId} {
      allow read, write: if request.auth != null && (
        resource.data.userId == request.auth.uid ||
        request.auth.uid == 'uJLXftk0DCYd2ujOjxX30zETSm33' ||
        request.auth.token.email == 'admin@inrooms.com'
      );
      allow create: if request.auth != null && (
        request.resource.data.userId == request.auth.uid ||
        request.auth.uid == 'uJLXftk0DCYd2ujOjxX30zETSm33' ||
        request.auth.token.email == 'admin@inrooms.com'
      );
    }
  }
}